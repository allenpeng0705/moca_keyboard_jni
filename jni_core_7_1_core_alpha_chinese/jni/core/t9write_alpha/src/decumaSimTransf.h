/*******************************************************************************
;*******************************************************************************
;**                                                                           **
;**                    COPYRIGHT 2010 NUANCE COMMUNICATIONS                   **
;**                                                                           **
;**                NUANCE COMMUNICATIONS PROPRIETARY INFORMATION              **
;**                                                                           **
;**     This software is supplied under the terms of a license agreement      **
;**     or non-disclosure agreement with Nuance Communications and may not    **
;**     be copied or disclosed except in accordance with the terms of that    **
;**     agreement.                                                            **
;**                                                                           **
;*******************************************************************************
;******************************************************************************/


/*
Autogenerated header.
$Revision: 1.5 $
$Date: 2011/02/14 11:41:14 $
$Author: jianchun_meng $
*/

#ifndef DECUMA_SIMTRANSF_ASDFLASDFASLIDFLSIUUIUOUIOUOI
#define DECUMA_SIMTRANSF_ASDFLASDFASLIDFLSIUUIUOUIOUOI

#ifdef __cplusplus
extern "C" {
#endif

#ifdef DECUMA_MANGLE
#include "mangle.h"
#endif

#include "decumaConfig.h"
#include "decumaDataTypes.h"

#define SIM_TRANSF_ROUNDING_FACTOR 32
#define SIM_TRANSF_SCALE_FACTOR 512
#define MAX_SIM_TRANSF_SCALE 32768
#define MIN_SIM_TRANSF_SCALE 1

#if defined(_WIN32) && defined(_DEBUG)
#include <stdio.h>
#endif

typedef struct _tagSimTransf{
	DECUMA_UINT32 scale; /*scaled by 'SIM_TRANSF_SCALE_FACTOR'*/
	int theta; /*Stored as radians multiplied with 100 */
	INT32_POINT delta;  /* scaled by 'SIM_TRANSF_ROUNDING_FACTOR' */
	INT32_POINT symPoint; /* scaled by 'SIM_TRANSF_ROUNDING_FACTOR' */
} SIM_TRANSF;

/*------------- simtransf ----------------------- */
#define simtransfCopy( pTo, pFrom) { *pTo = *pFrom ; } 

DECUMA_HWR_PRIVATE void simtransfScale(SIM_TRANSF *pTo, int scale_num, int scale_denom);

DECUMA_HWR_PRIVATE void simtransfComposedWithInverse(INT32_POINT *pTo, const INT32_POINT *pFrom,
							const SIM_TRANSF *pTransf1, const SIM_TRANSF *pTransf2);

DECUMA_HWR_PRIVATE void simtransfPoint(INT32_POINT *pTo, const INT32_POINT *pFrom, const SIM_TRANSF *pTransf);

DECUMA_HWR_PRIVATE void inverseSimTransf(SIM_TRANSF *pInvTransf, const SIM_TRANSF *pTransf);

DECUMA_HWR_PRIVATE void simtransfInit(SIM_TRANSF * pTransf);

/*Returns 1 if the two simtransfs are equal. Otherwise returns 0. */
DECUMA_HWR_PRIVATE int simtransfEqual(SIM_TRANSF * pTransf1, SIM_TRANSF * pTransf2);

/*Returns 1 if the two simtransfs differ only with <=1 for any member. Otherwise returns 0. */
DECUMA_HWR_PRIVATE int simtransfAlmostEqual(SIM_TRANSF * pTransf1, SIM_TRANSF * pTransf2);

#ifdef DEBUG_DUMP_SCR_DATA
/* Writes the data in the struct SIM_TRANSF to a file. */
DECUMA_HWR_PRIVATE void simTransfDump(FILE * pf, SIM_TRANSF * pT);
#endif /* DEBUG_DUMP_SCR_DATA */

#ifdef __cplusplus
}/*extern "C" { */
#endif
#endif
