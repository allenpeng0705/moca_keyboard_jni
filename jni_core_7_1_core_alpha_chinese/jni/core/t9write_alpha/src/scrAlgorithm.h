/*******************************************************************************
;*******************************************************************************
;**                                                                           **
;**                    COPYRIGHT 2010 NUANCE COMMUNICATIONS                   **
;**                                                                           **
;**                NUANCE COMMUNICATIONS PROPRIETARY INFORMATION              **
;**                                                                           **
;**     This software is supplied under the terms of a license agreement      **
;**     or non-disclosure agreement with Nuance Communications and may not    **
;**     be copied or disclosed except in accordance with the terms of that    **
;**     agreement.                                                            **
;**                                                                           **
;*******************************************************************************
;******************************************************************************/


/*
Autogenerated header.
$Revision: 1.5 $
$Date: 2011/02/14 11:41:14 $
$Author: jianchun_meng $
*/

#ifndef scrAlgorithm_h
#define scrAlgorithm_h

#ifdef DECUMA_MANGLE
#include "mangle.h"
#endif

#include "databaseKEY.h"
#include "scrOutput.h"
#include "scrCurve.h"
#include "scrProxCurve.h"
#include "scrAPI.h"
#include "scrHeapMem.h"

#include "decuma_hwr_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/** scrSel is the main entry point for calls to the scr algorithm.
It assumes that it is supplied a valid, precalculated curve as parameter.
That means that all members must be assigned valid values. For example, 
measure_id really should be set to 0 and alpha to 8. noArcs shall also 
represent the number of arcs pointed to by the Arcs vector.

To make sure that the input curve is correctly formatted use arcPrecalculate.

parameters:
	pOut		this points to a array of scrOUTPUT elements with the length 
				of nOutputs. If zooming shall work it is crucial that it is 
				at least two elements long. Upon exit this vector contains 
				the two best guesses of the algorithm, with the most likely 
				match at index 0.
	nOutputs	The length of the vector pointed to by pOut.
	kurva		The input curve. It must have at least one arc, and shall be 
				precalculated with measure_id == 0  and alpha == 8.

	pPrecalculatedBaseOutputs	If this pointer is other than zero, it should be a vector
								of MAX_ARCS_IN_DIACRITIC length. The vector should contain
								structs (scrOUTPUT_LIST) that tells how many baseOutputs are
								supplied, and a pointers to the first baseOutput. The baseOutputs
								contain the result of prior comparisons with the first n arcs of
								the input curve. Here 
								n= (number of arcs in input curve) - (index+1 of the struct in the vector)
								E.g. if we call scrSel with a 4-arcs-long curve, 
									pPrecalculatedBaseOutputs[1].pOut contains a vector of precalculated outputs from a comparison
											of the 4-(1+1) = 2 first arcs of the curve against the database.
									pPrecalculatedBaseOutputs[1].nOutputs contains the number of precalculated outputs (for 2 first arcs)

	pSettings	See scrSelect in scrAPI.h.

Returns:
	The number of written scrOUTPUTs
*/
DECUMA_HWR_PRIVATE DECUMA_STATUS scrSel(scrOUTPUT* pOut, int * pnOutputs, int nMaxOutputs, SCR_CURVE *kurva,
			   const scrOUTPUT_LIST * pPrecalculatedBaseOutputs, 
			   SCR_HEAP_MEM * pScrHeap,
			   const DECUMA_INTERRUPT_FUNCTIONS * pInterruptFunctions);

DECUMA_HWR_PRIVATE int valueTransf(int angle, const KID * pKid, int nRefAngle, int nRefAngleImportance);

DECUMA_HWR_PRIVATE void preCalculateCurve(SCR_CURVE* p,int measure_id, int /*INT16 */  alpha);
/*void ArcLength(SCR_CURVE* p, SCR_CURVE* q); */

DECUMA_HWR_PRIVATE int GetMeasureSection(int measure_id, DECUMA_INT16 * pTarget, int nTotalLength, int nStartAt, int nExtractLength);
/*int GetMeasure(int measure_id, NUMBERLIST* p); */

DECUMA_HWR_PRIVATE scrOUTPUT* scrGetExpectedSmallCurveOutput(STATIC_DB_HEADER_PTR pDB,
										  const SCR_CURVE* pCurve,
										  int nBaseLine,
										  int nHelpLine, 
										  CATEGORY_TABLE_PTR pCatTable,
										  const SCR_API_SETTINGS * pSettings,
										  scrOUTPUT* pOutput);

DECUMA_HWR_PRIVATE_DATA_H const DECUMA_INT16 maxProxValue;
DECUMA_HWR_PRIVATE_DATA_H const DECUMA_INT16 accuracyInInterpolate;

#ifdef __cplusplus
} /*extern "C" { */
#endif


#endif

