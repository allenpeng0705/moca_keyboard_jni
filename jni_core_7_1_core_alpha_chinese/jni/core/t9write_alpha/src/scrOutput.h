/*******************************************************************************
;*******************************************************************************
;**                                                                           **
;**                    COPYRIGHT 2010 NUANCE COMMUNICATIONS                   **
;**                                                                           **
;**                NUANCE COMMUNICATIONS PROPRIETARY INFORMATION              **
;**                                                                           **
;**     This software is supplied under the terms of a license agreement      **
;**     or non-disclosure agreement with Nuance Communications and may not    **
;**     be copied or disclosed except in accordance with the terms of that    **
;**     agreement.                                                            **
;**                                                                           **
;*******************************************************************************
;******************************************************************************/


/*
Autogenerated header.
$Revision: 1.5 $
$Date: 2011/02/14 11:41:14 $
$Author: jianchun_meng $
*/

#ifndef OUTPUT_H
#define OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

#ifdef DECUMA_MANGLE
#include "mangle.h"
#endif

#include "scrCurve.h"
#include "decumaSimTransf.h"
#include "databaseFormat.h"
#include "scrAPI.h"

/* This struct is used for returning
and storing information resulting from attemts to match a curve with
keys in the database.
noOutputs: 
	The number of outputs that may be stored in a instance of HASH_INTERMEDIATE_OUTPUT
	each output consists of three values. The index, the mu and the punish.
	The index is the index in the database
	The mu value is how far we are from a perfect match (low value == good match)
	The punish depends on how much the tested curve "tilded" compared to the key 
	in the database. High tild is punished with a high number. (to prevent a C from beeing
	interpreted as a U)
*index: 
	index[0] is the database index to the best match. index[1} to the second best etc.
	the index vector is noOutputs long.
	To get a key from the database, given a index, the programmer must already kno w the number
	of arcs used in the curve that have been used for comparison. This littï¿½le code snippet demonstrates
	how this is done:

			scrSel(pOut, pCurve );
			if(pOut->noOutputs > 0)
				pKey = databaseAccessKeyByIndex(pCurve->noArcs, pOut->index[0]);
			else
				pKey = 0;

*mu:
	the "mu" value for each hit are stored here.
	the "mu" value for hit number one is stored in mu[0] etc.
	the mu vector is noOutputs element long.
*punish
	the "punish" value for each hit. 
	the "punish" value for hit number one is stored in mu[0] etc.
	the punish vector is noOutputs element long.
*/
/*typedef struct {
	short noOutputs;
	short *index;
	INT16* mu;
	//int   *cutLeft;
	//int   *cutRight;
	INT16  *punish;
	UINT8   *noCut;   // To remember which 'cut' that caused this output
} HASH_INTERMEDIATE_OUTPUT;*/

/*#define scrOutputGetSymbol(pOutput) ((pOutput)->symbol) */

typedef OUT_SYMBOL outSYMBOL;

typedef SCR_OUTPUT scrOUTPUT;

typedef SCR_OUTPUT_LIST scrOUTPUT_LIST;

DECUMA_HWR_PRIVATE void outputInit(scrOUTPUT * pOut);

DECUMA_HWR_PRIVATE int  outputSort(scrOUTPUT * pOut, int nOut);

DECUMA_HWR_PRIVATE void outputInitVector(scrOUTPUT * pOut, int nOut);

/*
This structure resets a vector of scrOUTPUT elements. This must be done to a vector 
before using the addToOutputIfGoodEnoughAndNotToManyOfTheSameSymbol function.
Note that this is not the same as using memset. The mu value and DB indexes shall
not be 0.
Parameters:
	pOut	Pointer to the vector that shall be reset.
	nOut	The number of elements in the vector pointed to by pOut.
*/
DECUMA_HWR_PRIVATE void outputResetVector(scrOUTPUT * pOut, int nOut);



/* Returns a pointer to the conflict data struct for the output. */
/* If the output has no conflicts NULL is returned. */
DECUMA_HWR_PRIVATE TYPE_CONFLICTS_PTR outputGetConflictData(const scrOUTPUT * pOut);

/* Returns non-zero if output 1 has a conflict with output 2, */
/* i.e. if output #2 shall be prioritized? */
/* pOut1Conflict shall point to a TYPE_CONFLICTS struct for output #1 */
/* pOut2 shall point to output #2 */
DECUMA_HWR_PRIVATE int outputConflict(TYPE_CONFLICTS_PTR pOut1Conflict,
						  const scrOUTPUT * pOut2);


/* Creates a scr output from KID index with proximity mu. */
DECUMA_HWR_PRIVATE void scrOutputCreateSpecial(scrOUTPUT * pOutput, const SCR_CURVE * pCurve, DECUMA_INT16 mu, KID * pKid);

#ifdef DEBUG_DUMP_SCR_DATA
/* Writes the data in the struct scrOUTPUT to a file.  */
DECUMA_HWR_PRIVATE void scrOutputDump(FILE * pf, scrOUTPUT * pOutput);
#endif /*DEBUG_DUMP_SCR_DATA */


#ifdef __cplusplus
} /* export "C" { */
#endif
#endif
