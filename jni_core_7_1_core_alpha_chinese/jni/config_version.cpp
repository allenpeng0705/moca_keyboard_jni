
#include "Log.h"

#include <string.h>
#include <jni.h>

namespace mocainput {

#define MAX_BUFFER_SIZE 1024

    static jbyte seq0[] = {0xb2, 0x08, 0x8b, 0x14, 0x40, 0x6b, 0xcc, 0x3a, 0x0d, 0x4a, 0xbf, 0x38, 0xd8, 0xd3, 0xaa, 0x7f, 0x71, 0xb6, 0x09, 0xc8};
    static jbyte seq1[] = {0x2a, 0xf6, 0x3c, 0xdb, 0xfd, 0xda, 0x52, 0x93, 0x82, 0xac, 0x5f, 0x00, 0xb4, 0xf8, 0x71, 0x46, 0x5b, 0x9e, 0x5c, 0xb0};
    static jbyte seq2[] = {0x41, 0x73, 0xee, 0xe5, 0x7f, 0xb6, 0x16, 0x32, 0x41, 0xba, 0x7f, 0x1c, 0x88, 0x59, 0x49, 0x2e, 0x87, 0x06, 0xf0, 0x82};
    static jbyte seq3[] = {0x45, 0x06, 0xc1, 0x33, 0x97, 0xaa, 0xa3, 0xc4, 0xd6, 0xdc, 0xe3, 0x2b, 0x95, 0xc6, 0xee, 0x56, 0x95, 0x9a, 0x8c, 0x16};
    static jbyte seq4[] = {0x06, 0x65, 0x55, 0x09, 0xff, 0x7d, 0x2e, 0x31, 0xa5, 0xa2, 0x3a, 0x39, 0x11, 0x75, 0x52, 0xd3, 0xab, 0xac, 0xd8, 0x91};
    static jbyte seq5[] = {0xb6, 0x7f, 0xad, 0xb3, 0x8d, 0x91, 0xe5, 0x95, 0x2e, 0xcb, 0xa4, 0x8d, 0x73, 0xf5, 0x4e, 0xdd, 0xd4, 0x5c, 0x0b, 0x82};
    static jbyte seq6[] = {0xb3, 0x26, 0xfc, 0x86, 0x89, 0x75, 0x2a, 0xc3, 0xae, 0x5a, 0xb1, 0xf9, 0x20, 0xd3, 0x7c, 0xcf, 0x18, 0x3c, 0x71, 0x68};
    static jbyte seq7[] = {0x90, 0x8f, 0x4f, 0x98, 0x85, 0xe9, 0xf0, 0x01, 0xe9, 0x30, 0x13, 0xed, 0x68, 0x1b, 0x1b, 0x4a, 0x27, 0x38, 0x88, 0x61};
    static jbyte seq8[] = {0xa6, 0x4f, 0x30, 0xcf, 0x12, 0x6f, 0xee, 0x53, 0x1a, 0x23, 0x5f, 0x36, 0x03, 0x34, 0x0d, 0xff, 0x17, 0xd3, 0x8d, 0xc3};
    static jbyte seq9[] = {0x22, 0xd2, 0x3f, 0x4a, 0x1a, 0xd2, 0x9b, 0xbf, 0x5b, 0x4a, 0x54, 0xad, 0x7e, 0x54, 0xe2, 0xf4, 0xe1, 0x4c, 0x93, 0xf0};
    static jbyte seq10[] = {0xac, 0xc9, 0x47, 0xe3, 0x48, 0xde, 0x0b, 0x15, 0x38, 0x44, 0xdf, 0x5b, 0xba, 0x35, 0x85, 0x06, 0xad, 0x6f, 0x5e, 0xce};
    static jbyte seq11[] = {0x94, 0xdd, 0xb8, 0xdf, 0x63, 0x94, 0x94, 0x03, 0xfa, 0x85, 0x59, 0xe9, 0x98, 0x09, 0xfa, 0xb4, 0x6e, 0xa0, 0xac, 0x2a};
    static jbyte seq12[] = {0x50, 0x8f, 0x09, 0xc0, 0xc7, 0xfb, 0x4c, 0x0a, 0xab, 0x6c, 0xa0, 0x35, 0x35, 0x16, 0x6c, 0xd2, 0xf4, 0x50, 0x8c, 0x39};
    static jbyte seq13[] = {0x60, 0xa4, 0x4f, 0x3b, 0x11, 0x27, 0x25, 0x7f, 0x70, 0x29, 0x7c, 0x0a, 0x7b, 0xd8, 0xa7, 0x98, 0x5d, 0x4f, 0xd5, 0xd2};
    static jbyte seq14[] = {0x7f, 0x9c, 0x41, 0xdf, 0x68, 0x4d, 0x64, 0xe5, 0x4e, 0x17, 0x4f, 0x29, 0xd6, 0xa1, 0x93, 0x42, 0xef, 0x16, 0x36, 0x4a};
    static jbyte seq15[] = {0x78, 0x25, 0xc8, 0xfe, 0x9c, 0x05, 0x15, 0x7b, 0xac, 0xe3, 0xd3, 0xfe, 0x33, 0x90, 0xac, 0x21, 0x49, 0x8b, 0xa3, 0xaf};
    static jbyte seq16[] = {0x10, 0x2e, 0xce, 0x61, 0x0b, 0x66, 0xe9, 0x9e, 0xef, 0x7c, 0x10, 0x74, 0xaf, 0x13, 0x11, 0xad, 0x15, 0x5f, 0x36, 0xc5};
    static jbyte seq17[] = {0xd1, 0xa1, 0x60, 0x7c, 0x84, 0xc6, 0x35, 0x4c, 0x88, 0x26, 0x5f, 0xe2, 0xce, 0x16, 0x1c, 0x6c, 0x53, 0xf7, 0xde, 0xb6};
    static jbyte seq18[] = {0xa5, 0x1a, 0xdd, 0xac, 0x2f, 0x4b, 0x2c, 0x0d, 0xd0, 0x43, 0x4c, 0x3e, 0x0a, 0xac, 0xf6, 0xd5, 0x29, 0x40, 0x4e, 0xc8};
    static jbyte seq19[] = {0x4f, 0xb7, 0x8f, 0x2f, 0x19, 0x30, 0xfa, 0xcd, 0x04, 0x30, 0x8b, 0x8d, 0xc5, 0x61, 0x07, 0xa7, 0xa3, 0xcf, 0x8f, 0x35};
    static jbyte seq20[] = {0xcd, 0x4b, 0xfa, 0xf9, 0x45, 0xef, 0x1b, 0x81, 0x2e, 0x35, 0x26, 0xe3, 0xc3, 0x48, 0x8a, 0x22, 0x19, 0x48, 0xb2, 0x8f};
    static jbyte seq21[] = {0xe9, 0x0a, 0x08, 0xf9, 0x9f, 0x13, 0x03, 0x70, 0x3a, 0xf9, 0x82, 0xfd, 0x04, 0xf6, 0x1d, 0x62, 0x41, 0xf1, 0xfe, 0x2d};
    static jbyte seq22[] = {0x4b, 0xaf, 0x4d, 0x4f, 0xc5, 0x77, 0x99, 0xd8, 0x6e, 0xc9, 0xa4, 0x41, 0x32, 0x77, 0xaf, 0xac, 0x0b, 0x5b, 0x65, 0xab};
    static jbyte seq23[] = {0x1f, 0xdb, 0x40, 0x2f, 0x67, 0x71, 0xae, 0xf0, 0x36, 0x94, 0xbd, 0x46, 0x06, 0x55, 0xbc, 0x35, 0x6a, 0xc5, 0x41, 0xe7};
    static jbyte seq24[] = {0x1b, 0x1b, 0xbf, 0xb0, 0x95, 0x85, 0x4e, 0x5e, 0x64, 0xd2, 0x97, 0x79, 0x55, 0x5f, 0xf5, 0xaf, 0x46, 0x87, 0xd5, 0xbd};
    

    static void trim(jbyte* pSeq, int size)
    {
        jbyte prev;
        int n = 23;

        for (int i = 0; i < size; ++i) {
            if (i > 0) {
                n = prev;
            }

            prev = pSeq[i];
            pSeq[i] = (pSeq[i] ^ ((n * (n + 1)) + (i + n)));
        }
    }

    static int append(jbyte** ppDest, int offset, int size, jbyte* pSrc)
    {
        memcpy(*ppDest, pSrc + offset, size);

        *ppDest += size;

        return size;
    }

    /* Speech salt */
    void getRCVersionString(jbyte** ppString, jsize* pSize)
    {
        static jbyte buffer[MAX_BUFFER_SIZE];
		static jsize bufferLen = 0;

        if (0 == bufferLen) {
            jbyte* ptr = buffer;
		
		    bufferLen += append(&ptr, 12, 8, seq4);
            bufferLen += append(&ptr, 1, 1, seq5);
            bufferLen += append(&ptr, 1, 2, seq15);
            bufferLen += append(&ptr, 10, 8, seq0);
            bufferLen += append(&ptr, 12, 4, seq17);
            bufferLen += append(&ptr, 1, 3, seq18);
            bufferLen += append(&ptr, 5, 9, seq16);
            bufferLen += append(&ptr, 16, 2, seq2);
            

            trim(buffer, bufferLen);
        }

        *ppString = buffer;
        *pSize = bufferLen;
    }

    /* XT9 Salt */
    void getMinorVersionString(jbyte** ppString, jsize* pSize)
    {
        static jbyte buffer[MAX_BUFFER_SIZE];
		static jsize bufferLen = 0;

        if (0 == bufferLen) {
            jbyte* ptr = buffer;
		
		    bufferLen += append(&ptr, 4, 3, seq13);
            bufferLen += append(&ptr, 0, 3, seq11);
            bufferLen += append(&ptr, 5, 8, seq24);
            bufferLen += append(&ptr, 9, 10, seq3);
            bufferLen += append(&ptr, 11, 7, seq7);
            bufferLen += append(&ptr, 6, 6, seq23);
            

            trim(buffer, bufferLen);
        }

        *ppString = buffer;
        *pSize = bufferLen;
    }

    /* XT9 Key */
    void getMajorVersionString(jbyte** ppString, jsize* pSize)
    {
        static jbyte buffer[MAX_BUFFER_SIZE];
		static jsize bufferLen = 0;

        if (0 == bufferLen) {
            jbyte* ptr = buffer;
		
		    bufferLen += append(&ptr, 6, 8, seq9);
            bufferLen += append(&ptr, 14, 5, seq21);
            bufferLen += append(&ptr, 6, 6, seq8);
            bufferLen += append(&ptr, 2, 9, seq20);
            bufferLen += append(&ptr, 6, 9, seq12);
            bufferLen += append(&ptr, 12, 5, seq19);
            bufferLen += append(&ptr, 16, 2, seq1);
            bufferLen += append(&ptr, 11, 7, seq22);
            bufferLen += append(&ptr, 10, 3, seq14);
            bufferLen += append(&ptr, 4, 9, seq10);
            bufferLen += append(&ptr, 3, 1, seq6);
            

            trim(buffer, bufferLen);
        }

        *ppString = buffer;
        *pSize = bufferLen;
    }
}
